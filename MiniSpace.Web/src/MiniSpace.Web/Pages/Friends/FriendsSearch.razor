@page "/friends/search"
@using MiniSpace.Services.Friends.Application.Dto
@using MiniSpace.Web.HttpClients
@using Radzen.Blazor
@inject NavigationManager NavigationManager
@using MiniSpace.Web.Areas.Friends
@inject IFriendsService FriendsService
@using MiniSpace.Web.DTO
@using MiniSpace.Web.Areas.Identity
@using MiniSpace.Web.Areas.MediaFiles
@inject IIdentityService IdentityService
@inject IMediaFilesService MediaFilesService
@inject Radzen.NotificationService NotificationService
@inject IJSRuntime JSRuntime
@using MudBlazor

<div class="breadcrumbs-container">
    <MudBreadcrumbs Class="custom-breadcrumbs" Items="_items"></MudBreadcrumbs>
</div>
@code {
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "/", icon: Icons.Material.Filled.Home),
        new BreadcrumbItem("Friends", href: "/friends", icon: Icons.Material.Filled.VideoLibrary),
        new BreadcrumbItem("Search", href: "/friends/search", disabled: true, icon: Icons.Material.Filled.Create)
    };
}

<div style="display: flex; padding: 50px;">
    <div class="left-panel">
        <div class="search-bar">
            <RadzenTextBox @bind-Value="searchTerm" Placeholder="Search friends..." Style="width: 75%;" />
            <RadzenButton Text="Search" Click="@SearchFriends" ButtonStyle="Radzen.ButtonStyle.Secondary" Icon="search" Style="margin-left: 10px; width: 23%;" />
        </div>
        <div class="card-container">
            @foreach (var student in students)
            {
                 <div class="friend-card" @onclick="@(() => OnDetails(student))">
                     @if(images.ContainsKey(student.Id))
                     { 
                         <img src="@GetImage(images[student.Id])" alt="Student Image" class="friend-img">
                     }
                    <div class="friend-info">
                        <h5>@student.FirstName @student.LastName</h5>
                        <p>Email: @student.Email</p>
                        <div class="buttons">
                            @* <RadzenButton Text="Connect" Disabled="@student.IsInvitationPending" 
                                Click="@(e => ConnectWithStudent(student.Id, e))" 
                                ButtonStyle="Radzen.ButtonStyle.Secondary" 
                                Style="width: 100%; margin-top: 8px;" /> *@
                            <RadzenButton Text="Details" ButtonStyle="Radzen.ButtonStyle.Secondary" 
                                          Click="@(() => ViewDetails(student.Id))" 
                                          Style="width: 100%; margin-top: 8px; border-radius: 5px;" />
                            @if (student.Id != IdentityService.GetCurrentUserId() && !sentRequests.Any(r => r.InviteeId == student.Id) && !allFriends.Any(f => f.FriendId == student.Id))
                            {
                                <RadzenButton Text="Connect" Click="@(e => ConnectWithStudent(student.Id, e))" 
                                            ButtonStyle="Radzen.ButtonStyle.Secondary" 
                                            Style="width: 100%; margin-top: 8px; border-radius: 5px;" />
                            }
                            else if (allFriends.Any(f => f.FriendId == student.Id))
                            {
                                <RadzenButton Text="Connected" Disabled="true" 
                                            Style="width: 100%; margin-top: 8px; background-color: white; color: black; border: 1px solid #ccc; border-radius: 5px;" />
                            }
                            else if (sentRequests.Any(r => r.InviteeId == student.Id))
                            {
                                <RadzenButton Text="Pending" Disabled="true" 
                                            Style="width: 100%; margin-top: 8px; background-color: #ccc; color: black; border-radius: 5px;" />
                            }
                            else if (incomingRequests.Any(r => r.InviteeId == IdentityService.GetCurrentUserId() && r.State == DTO.States.FriendState.Requested))
                            {
                                <RadzenButton Text="Incoming Request" Disabled="true" 
                                            Style="width: 100%; margin-top: 8px; background-color: blue; color: white; border-radius: 5px;" />
                            }
                            else if (student.Id == IdentityService.GetCurrentUserId())
                            {
                                <RadzenButton Text="It's You" Disabled="true" 
                                            Style="width: 100%; margin-top: 8px; background-color: grey; color: white; border-radius: 10px; border-radius: 5px;" />
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
   
    <div class="right-panel">
          
            @if (student != null)
            {
                <div class="notification-block">
                <RadzenNotification @ref="notificationComponent" Style="position:sticky; top: 10px; right: 20px;" />
                </div>
                <div class="student-details">
                   
                   <div>
                    <img src="@GetImage(images[student.Id])" alt="Profile Image" class="profile-image"/>
                    <div class="info-block">
                        <h3 class="name">@student?.FirstName @student?.LastName</h3>
                        <ul class="details-list">
                            <li><strong>ID:</strong> @student?.Id</li>
                            <li><strong>Email:</strong> @student?.Email</li>
                            <li><strong>Description:</strong> @student?.Description</li>
                            <li><strong>Number of Friends:</strong> @student?.NumberOfFriends</li>
                            <li><strong>Date of Birth:</strong> @student?.DateOfBirth.ToLocalTime().ToString("yyyy-MM-dd")</li>
                            <li><strong>State:</strong> @student?.State</li>
                            <li><strong>Created At:</strong> @student?.CreatedAt.ToLocalTime().ToString("yyyy-MM-dd")</li>
                        </ul>
                         <div class="buttons">
                             
                            @if (student.Id != IdentityService.GetCurrentUserId() && !sentRequests.Any(r => r.InviteeId == student.Id) && !allFriends.Any(f => f.FriendId == student.Id))
                            {
                                <RadzenButton Text="Connect" Click="@(e => ConnectWithStudent(student.Id, e))" 
                                            ButtonStyle="Radzen.ButtonStyle.Secondary" 
                                            Style="width: 100%; margin-top: 8px; border-radius: 5px;" />
                            }
                            else if (allFriends.Any(f => f.FriendId == student.Id))
                            {
                                <RadzenButton Text="Connected" Disabled="true" 
                                            Style="width: 100%; margin-top: 8px; background-color: white; color: black; border: 1px solid #ccc; border-radius: px;" />
                            }
                            else if (sentRequests.Any(r => r.InviteeId == student.Id))
                            {
                                <RadzenButton Text="Pending" Disabled="true" 
                                            Style="width: 100%; margin-top: 8px; background-color: #ccc; color: black; border-radius: 5px;" />
                            }
                             else if (incomingRequests.Any(r => r.InviteeId == IdentityService.GetCurrentUserId() && r.State == DTO.States.FriendState.Requested))
                            {
                                <RadzenButton Text="Incoming Request" Disabled="true" 
                                            Style="width: 100%; margin-top: 8px; background-color: blue; color: white; border-radius: px; border-radius: 5px;" />
                            }
                            else if (student.Id == IdentityService.GetCurrentUserId())
                            {
                                <RadzenButton Text="It's You" Disabled="true" 
                                            Style="width: 100%; margin-top: 8px; background-color: grey; color: white; border-radius: 5px;" />
                            }
                       
                        </div>
                     </div>
                    
                   </div> 
                </div>
            }
            else
            {
                <div class="no-details">
                    <p>Select a student to view details.</p>
                </div>
            }
        </div>
    </div>
<div class="pagination-controls">
    <button  @onclick="() => SetPage(1)">First</button>
    <button  @onclick="() => SetPage(currentPage - 1)">Previous</button>
    <span>Page @currentPage of @(Math.Ceiling((double)totalStudents / pageSize))</span>
    <button @onclick="() => SetPage(currentPage + 1)">Next</button>
    <button  @onclick="() => SetPage((totalStudents + pageSize - 1) / pageSize)">Last</button>
</div>


<style>

    .notification-block {
        position: fixed; 
        top: 20px;
        right: 20px;
        z-index: 1050;
        max-width: 300px;
    }

    .main-container { 
        overflow: visible; 
        display: flex;   
        align-items: 
        flex-start; 
    }

    .left-panel {  
        width: 100%;   
        overflow-y: auto; 
    }

    .right-panel {
        width: 70%; 
        padding: 25px;
        position: sticky;
        top: 100px; 
        background-color: white; 
    }

    .left-panel, .right-panel {
        background-color: #f7f7f7; 
        border-radius: 8px;
        padding: 20px;
        margin: 10px;
        box-shadow: 0 4px 10px rgba(0,0,0,0.05); 
    }
    .search-bar {
        display: flex; 
        margin-bottom: 20px; 
        }
    
    .card-container {
        display: flex;
        flex-direction: column;
    }

    .friend-card {
        display: flex;
        background-color: #ffffff;
        margin-bottom: 1rem !important;
        border: 1px solid #ddd;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        transition: all 0.3s;
        cursor: pointer;
        align-items: center;
        padding: 20px;
        border-radius: 8px;
    }

    .friend-card:hover {
        box-shadow: 0 5px 15px rgba(0,0,0,0.15);
    }

    .friend-img {
        width: 100px;
        height: 100px;
        border-radius: 50%;
        margin-right: 20px;
        object-fit: cover;
        border: 3px solid #007BFF; 
    }

    .friend-info {
        flex: 1;
    }

    .search-bar input:focus {
        outline: none;
        border: 2px solid #0056b3;
        box-shadow: 0 0 5px rgba(0, 86, 179, 0.5);
    }

    .pagination-controls {
        margin-top: 20px;
        display: flex;
        justify-content: center;
    }

    .pagination-controls button {
        padding: 8px 16px;
        margin-right: 5px;
        background-color: #007BFF;
        color: white;
        border: none;
        border-radius: 5px;
    }

    .pagination-controls button:disabled {
        background-color: #ccc;
    }

    .profile-image {
        width: 400px; 
        height: 400px;
        border-radius: 5%;
        object-fit: cover;
        border: 4px solid #ffffff; 
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); 
        transition: transform 0.3s ease-in-out; 
    }

    .profile-image:hover {
        transform: scale(1.05);
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2); 
    }

    .info-block {
        background-color: #ffffff;
        padding: 15px;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        margin-top: 15px;
    }

    .details-list {
        list-style: none;
        padding: 0;
        margin-top: 10px;
    }

    .details-list li {
        margin-bottom: 8px;
        font-size: 16px;
    }

    .buttons {
        display: flex;
        flex-direction: row;
        gap: 8px;
        margin: 20px 0px 0px 10px !important;
    }


</style>

@code {
    private string searchTerm;
    private List<StudentDto> students = new List<StudentDto>();
    private IEnumerable<FriendRequestDto> sentRequests;
    private StudentDto student;
    RadzenNotification notificationComponent;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalStudents;
    private Dictionary<Guid, string> images = new ();
    private IEnumerable<FriendDto> allFriends;
    private IEnumerable<FriendRequestDto> incomingRequests;

    protected override async Task OnInitializedAsync() {
        await IdentityService.InitializeAuthenticationState(); 

        if (IdentityService.IsAuthenticated)
        {
            sentRequests = await FriendsService.GetSentFriendRequestsAsync();
            incomingRequests = await FriendsService.GetIncomingFriendRequestsAsync();
            allFriends = await FriendsService.GetAllFriendsAsync(IdentityService.GetCurrentUserId());

            await LoadStudents();
            StateHasChanged();

            
            
            var tasks = new List<Task>();
            foreach (var student in students)
            {
                tasks.Add(FetchImageAsync(student));
            }

            await Task.WhenAll(tasks);
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }
    
   private async Task FetchImageAsync(StudentDto student)
    {
        var result = await MediaFilesService.GetFileAsync(student.ProfileImage);
        if (result != null)
        {
            if (images.ContainsKey(student.Id))
            {
                images[student.Id] = result.Base64Content; 
            }
            else
            {
                images.Add(student.Id, result.Base64Content);
            }
        }
    }


    @* private async Task LoadStudents() {
        var result = await FriendsService.GetAllStudentsAsync(currentPage, pageSize);
        totalStudents = result.Count();
        if (result != null) {
            students = result.ToList();
        }
    } *@
   private async Task LoadStudents() {
        int maxPage = (int)Math.Ceiling((double)totalStudents / pageSize);
        if (currentPage > maxPage) currentPage = maxPage;
        if (currentPage < 1) currentPage = 1;

        var response = await FriendsService.GetAllStudentsAsync(currentPage, pageSize);
        if (response != null) {
            students = response.Results;
            totalStudents = response.Total; 
             StateHasChanged();
            await LoadImagesForStudents(students);
        } else {
            students = new List<StudentDto>();
        }
        StateHasChanged(); 
    }

     private async Task LoadImagesForStudents(List<StudentDto> students) {
        images = new Dictionary<Guid, string>();  // Clear previous images
        var tasks = students.Select(student => FetchImageAsync(student)).ToList();
        await Task.WhenAll(tasks);
    }

    private string GetImage(string base64Image)
    {
        if (string.IsNullOrWhiteSpace(base64Image))
        {
            return "images/user_image.png";
        }
        else
        {
            return $"data:image/jpeg;base64,{base64Image}";
        }
    }


    private void OnDetails(StudentDto selectedStudent) 
    {
        student = selectedStudent;
        StateHasChanged();
    }

    private void SearchFriends() {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            return;
        }
        students = students.Where(s => s.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                                       s.LastName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    @* private async Task ConnectWithStudent(Guid studentId)
    {
        var response = await FriendsService.AddFriendAsync(studentId);
        
    } *@

    private async Task ConnectWithStudent(Guid studentId, MouseEventArgs e) 
    {
        var currentUserId = IdentityService.GetCurrentUserId();
        await FriendsService.InviteStudent(currentUserId, studentId);

        var student = students.FirstOrDefault(s => s.Id == studentId);
        if (student != null)
        {
            student.InvitationSent = true;
            student.IsInvitationPending = true;
        }
        sentRequests = await FriendsService.GetSentFriendRequestsAsync();
        NotificationService.Notify(Radzen.NotificationSeverity.Success, "Invitation Sent", "The invitation has been successfully sent.", 10000);
        await JSRuntime.InvokeVoidAsync("playNotificationSound");
        StateHasChanged(); 
    }

    private async Task SetPage(int page) 
    {
        @* Console.WriteLine($"Attempting to set page to {page}"); *@
        if (page < 1 || page > Math.Ceiling((double)totalStudents / pageSize)) {
            @* Console.WriteLine("Page number out of range."); *@
            return;
        }
        currentPage = page;
        @* Console.WriteLine($"Page set to {currentPage}"); *@
        student = null;
        await LoadStudents();
        @* StateHasChanged();  *@
    }

    private void ViewDetails(Guid studentId)
    {
        NavigationManager.NavigateTo($"/student-details/{studentId}");
    }

}
